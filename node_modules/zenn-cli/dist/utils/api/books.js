"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBookBySlug = exports.getAllBooks = exports.getAllBookSlugs = exports.getBookDirNames = void 0;
var fs_extra_1 = __importDefault(require("fs-extra"));
var path_1 = __importDefault(require("path"));
var js_yaml_1 = __importDefault(require("js-yaml"));
var errors_1 = require("../errors");
// books
var booksDirectory = path_1.default.join(process.cwd(), 'books');
function getBookDirNames() {
    var allDirs;
    try {
        allDirs = fs_extra_1.default.readdirSync(booksDirectory);
    }
    catch (e) {
        errors_1.throwWithConsoleError('プロジェクトルートにbooksディレクトリがありません。`npx zenn init`を実行してください');
    }
    // return dirs only
    return allDirs
        ? allDirs.filter(function (f) {
            return fs_extra_1.default.statSync(path_1.default.join(booksDirectory, f)).isDirectory();
        })
        : [];
}
exports.getBookDirNames = getBookDirNames;
function getAllBookSlugs() {
    return getBookDirNames();
}
exports.getAllBookSlugs = getAllBookSlugs;
function getAllBooks(fields) {
    if (fields === void 0) { fields = []; }
    var slugs = getAllBookSlugs();
    var books = slugs.map(function (slug) { return getBookBySlug(slug, fields) || { slug: slug }; });
    return books;
}
exports.getAllBooks = getAllBooks;
function getConfigYamlData(fullDirPath) {
    var fileRaw;
    try {
        // try to get config.yaml
        fileRaw = fs_extra_1.default.readFileSync(fullDirPath + "/config.yaml", 'utf8');
    }
    catch (e) {
        // try to get config.yml
        try {
            fileRaw = fs_extra_1.default.readFileSync(fullDirPath + "/config.yml", 'utf8');
        }
        catch (e) { }
    }
    // couldn't get yaml files
    if (!fileRaw) {
        return null;
    }
    try {
        var yamlData = js_yaml_1.default.load(fileRaw);
        if (typeof yamlData === 'string' || typeof yamlData === 'number')
            throw 'invalid yaml';
        return yamlData;
    }
    catch (e) {
        // couldn't load yaml files
        errors_1.throwWithConsoleError("config.yaml\u306E\u8868\u8A18\u306B\u8AA4\u308A\u304C\u3042\u308A\u307E\u3059\uD83D\uDE3F\n " + fullDirPath + "/config.yaml");
    }
}
function bufferToDataURL(buffer, mediaType) {
    return "data:" + mediaType + ";base64," + buffer.toString('base64');
}
function getImageFileSize(fullPath) {
    var stat = fs_extra_1.default.statSync(fullPath);
    return stat.size;
}
function getCoverDataUrl(fullDirPath) {
    var fileNameOptions = ['cover.jpg', 'cover.jpeg', 'cover.png'];
    var bufferImage = undefined;
    var fileSize = undefined;
    var mediaType = 'image/jpeg';
    for (var _i = 0, fileNameOptions_1 = fileNameOptions; _i < fileNameOptions_1.length; _i++) {
        var fileName = fileNameOptions_1[_i];
        var fullPath = fullDirPath + "/" + fileName;
        try {
            bufferImage = fs_extra_1.default.readFileSync(fullPath);
            fileSize = getImageFileSize(fullPath);
            if (fileName.endsWith('.png'))
                mediaType = 'image/png';
            break;
        }
        catch (e) { }
    }
    if (!bufferImage || !fileSize)
        return null;
    if (fileSize > 1000 * 1000) {
        errors_1.throwWithConsoleError('カバー画像のサイズは1MB以下にしてください');
    }
    return bufferToDataURL(bufferImage, mediaType);
}
function getBookBySlug(slug, fields) {
    var fullDirPath = path_1.default.join(booksDirectory, slug.replace(/[/\\]/g, '')); // Prevent directory traversal
    var data = getConfigYamlData(fullDirPath);
    if (!data)
        return null;
    var result = {
        slug: slug,
    };
    // include only specified fields
    if (fields) {
        fields.forEach(function (field) {
            result[field] = data[field];
            if (field === 'coverDataUrl') {
                result[field] = getCoverDataUrl(fullDirPath);
            }
        });
    }
    else {
        // or include all
        result = Object.assign(result, data);
        result.coverDataUrl = getCoverDataUrl(fullDirPath);
    }
    return result;
}
exports.getBookBySlug = getBookBySlug;
