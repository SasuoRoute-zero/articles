"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAllArticles = exports.getArticleBySlug = void 0;
var fs_extra_1 = __importDefault(require("fs-extra"));
var path_1 = __importDefault(require("path"));
var gray_matter_1 = __importDefault(require("gray-matter"));
var errors_1 = require("../errors");
var articlesDirectory = path_1.default.join(process.cwd(), 'articles');
function getAllArticleSlugs() {
    var _a;
    return (_a = getArticleMdNames()) === null || _a === void 0 ? void 0 : _a.map(function (n) { return n.replace(/\.md$/, ''); });
}
function getArticleMdNames() {
    var allFiles;
    try {
        allFiles = fs_extra_1.default.readdirSync(articlesDirectory);
    }
    catch (e) {
        errors_1.throwWithConsoleError('プロジェクトルートにarticlesディレクトリがありません。`npx zenn init`を実行してください');
    }
    var mdRegex = /\.md$/;
    return allFiles ? allFiles.filter(function (f) { return f.match(mdRegex); }) : [];
}
function getArticleBySlug(slug, fields) {
    var fullPath = path_1.default.join(articlesDirectory, slug.replace(/[/\\]/g, '') + ".md" // Prevent directory traversal
    );
    var fileRaw;
    try {
        fileRaw = fs_extra_1.default.readFileSync(fullPath, 'utf8');
    }
    catch (e) {
        return null;
    }
    var _a = gray_matter_1.default(fileRaw), data = _a.data, content = _a.content;
    // return only specified fields
    if (fields) {
        var item_1 = {
            slug: slug,
        };
        fields.forEach(function (field) {
            if (field === 'content') {
                item_1[field] = content;
            }
            if (data[field] !== undefined) {
                item_1[field] = data[field];
            }
        });
        return item_1;
    }
    else {
        // or return all
        return __assign({ slug: slug,
            content: content }, data);
    }
}
exports.getArticleBySlug = getArticleBySlug;
function getAllArticles(fields) {
    if (fields === void 0) { fields = []; }
    var slugs = getAllArticleSlugs();
    var articles = slugs
        .map(function (slug) { return getArticleBySlug(slug, fields); })
        .filter(function (data) { return data !== null; });
    return articles;
}
exports.getAllArticles = getAllArticles;
