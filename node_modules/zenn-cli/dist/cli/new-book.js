"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.exec = void 0;
var path_1 = __importDefault(require("path"));
var fs_extra_1 = __importDefault(require("fs-extra"));
var arg_1 = __importDefault(require("arg"));
var slug_helper_1 = require("../utils/slug-helper");
var safe_1 = __importDefault(require("colors/safe"));
var constants_1 = require("./constants");
var generatePlaceholderChapters = function (bookDirPath) {
    var chapterBody = ['---', 'title: ""', '---'].join('\n') + '\n';
    ['example1.md', 'example2.md'].forEach(function (chapterFileName) {
        try {
            fs_extra_1.default.writeFileSync(path_1.default.join(bookDirPath, chapterFileName), chapterBody, { flag: 'wx' } // Don't overwrite
            );
            console.log("Chapter \uD83D\uDCC4 " + safe_1.default.green(chapterFileName) + " created.");
        }
        catch (e) {
            console.log(safe_1.default.red('チャプターファイルの作成時にエラーが発生') + e);
        }
    });
};
function parseArgs(argv) {
    try {
        return arg_1.default({
            // Types
            '--slug': String,
            '--title': String,
            '--published': String,
            '--summary': String,
            '--price': Number,
            '--help': Boolean,
            // Alias
            '-h': '--help',
        }, { argv: argv });
    }
    catch (e) {
        if (e.code === 'ARG_UNKNOWN_OPTION') {
            console.log(safe_1.default.red(constants_1.invalidOption));
        }
        else {
            console.log(safe_1.default.red('エラーが発生しました'));
        }
        console.log(constants_1.newBookHelpText);
        return null;
    }
}
exports.exec = function (argv) {
    var args = parseArgs(argv);
    if (!args)
        return;
    if (args['--help']) {
        console.log(constants_1.newBookHelpText);
        return;
    }
    var slug = args['--slug'] || slug_helper_1.generateSlug();
    var title = args['--title'] || '';
    var summary = args['--summary'] || '';
    var published = args['--published'] === 'true' ? 'true' : 'false'; // デフォルトはfalse
    var price = args['--price'] || 0; // デフォルトは¥0
    if (!slug_helper_1.validateSlug(slug)) {
        var errorMessage = slug_helper_1.getSlugErrorMessage(slug);
        console.error(safe_1.default.red("\u30A8\u30E9\u30FC\uFF1A" + errorMessage));
        process.exit(1);
    }
    var bookDirPath = path_1.default.join(process.cwd(), 'books', slug);
    try {
        fs_extra_1.default.mkdirpSync(bookDirPath);
    }
    catch (e) {
        // already exist => do nothing
    }
    var configYamlBody = [
        "title: \"" + title + "\"",
        "summary: \"" + summary + "\"",
        'topics: []',
        "published: " + published,
        "price: " + price + " # \u6709\u6599\u306E\u5834\u5408200\u301C5000",
        "# \u672C\u306B\u542B\u3081\u308B\u30C1\u30E3\u30D7\u30BF\u30FC\u3092\u9806\u756A\u306B\u4E26\u3079\u307E\u3057\u3087\u3046",
        "chapters:",
        "  - example1",
        "  - example2",
    ].join('\n') + '\n';
    var configYamlPath = path_1.default.join(bookDirPath, 'config.yaml');
    try {
        fs_extra_1.default.writeFileSync(configYamlPath, configYamlBody, { flag: 'wx' } // Don't overwrite
        );
        console.log("\uD83D\uDEE0 " + safe_1.default.green("books/" + slug + "/config.yaml") + " created.");
    }
    catch (e) {
        console.log(safe_1.default.red('エラーが発生しました') + e);
        process.exit(1);
    }
    generatePlaceholderChapters(bookDirPath);
};
